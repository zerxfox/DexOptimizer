        location ~* /dex_optimizer/webroot/.*\.sh$ {
            root /data/adb/modules;
            default_type text/plain;
            content_by_lua_block {
                local pipe = require("ngx.pipe")
                local uri = ngx.var.uri
                local script_path = ngx.var.document_root .. uri
        
                local file = io.open(script_path, "r")
                if not file then
                    ngx.status = 404
                    ngx.say("Error: script not found")
                    return
                end
                file:close()
        
                local args_str = ngx.var.query_string or ""
                local args_table = {}
                for arg in string.gmatch(args_str, "[^&]+") do
                    table.insert(args_table, arg)
                end
        
                local command = {"sh", script_path}
                for _, v in ipairs(args_table) do
                    table.insert(command, v)
                end
        
                local proc, err = pipe.spawn(command, { stdout = true, stderr = true })
                if not proc then
                    ngx.status = 500
                    ngx.say("Error: failed to execute script - ", err)
                    return
                end

                proc:set_timeouts(300000, 3600000, 3600000, 86400000)

                ngx.header["Content-Type"] = "text/plain"
                ngx.flush(true)
        
                while true do
                    local line, err = proc:stdout_read_line()
                    if not line then
                        break
                    end
                    ngx.say(line)
                    ngx.flush(true)
                end
        
                proc:wait()
            }
        }
        
        location /dex_optimizer/logs {
          content_by_lua_block {
            local file_path = "/data/adb/modules/dex_optimizer/webroot/script_logs.out"
            local offset = tonumber(ngx.var.arg_offset) or 0

            local file, err = io.open(file_path, "rb")
            if not file then
                ngx.status = 500
                ngx.say("Error opening log: ", err)
                return
            end

            local ok, seek_err = file:seek("set", offset)
            if not ok then
                ngx.status = 500
                ngx.say("Error seeking log: ", seek_err)
                file:close()
                return
            end

            local data = file:read("*a")
            local new_offset = file:seek("cur")
            file:close()

            if not data or #data == 0 then
                ngx.status = 204
                return
            end

            ngx.header["Content-Type"] = "text/plain"
            ngx.header["X-Log-Offset"] = tostring(new_offset)
            ngx.print(data)
          }
        }

       location /dex_optimizer/search_apps {
            content_by_lua_block {
                ngx.header["Content-Type"] = "text/plain"

                local app_name = ngx.var.arg_app_name or ""
                local handle = io.popen("pm list packages 2>/dev/null | cut -d':' -f2")

                if handle then
                    local packages = handle:read("*a") or ""
                    handle:close()

                    local matched = {}
                    for pkg in packages:gmatch("[^\n]+") do
                        if pkg:lower():find(app_name:lower(), 1, true) then
                            table.insert(matched, pkg)
                        end
                    end

                    if #matched > 0 then
                        ngx.say(table.concat(matched, "\n"))
                    else
                        ngx.say("")
                    end
                else
                    ngx.status = 500
                    ngx.say("Internal error")
                end
            }
        }

        location /dex_optimizer/stats.txt {
            default_type text/plain;
            content_by_lua_block {
                local file = io.open("/data/adb/modules/dex_optimizer/webroot/stats.txt", "r")
                if file then
                    local content = file:read("*all")
                    file:close()
                    ngx.say(content)
                else
                    ngx.status = ngx.HTTP_NOT_FOUND
                    ngx.say("File not found")
                end
            }
        }

        location /dex_optimizer/clear_stats {
            content_by_lua_block {
                local file_path = "/data/adb/modules/dex_optimizer/webroot/stats.txt"
                local file = io.open(file_path, "w")
                if file then
                    file:close()
                    ngx.say("OK")
                else
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say("ERROR")
                end
            }
        }

        location /dex_optimizer/check-update {
        content_by_lua_block {
            local http = require "resty.http"

            local httpc = http.new()
            local res, err = httpc:request_uri("https://raw.githubusercontent.com/zerxfox/DexOptimizer/main/update.json", {
                method = "GET",
                ssl_verify = false,
                scheme = "https",
                host = "raw.githubusercontent.com",
                port = 443,
                path = "/zerxfox/DexOptimizer/main/update.json",
            })

            if not res then
                ngx.status = 500
                ngx.say("Error: " .. err)
                return
            end

            if res.status ~= 200 then
                ngx.status = res.status
                ngx.say("HTTP error: " .. res.body)
                return
            end

            local zipUrl = res.body:match('"zipUrl"%s*:%s*"([^"]+)"')

            if not zipUrl then
                ngx.status = 400
                return
            end

            ngx.header.content_type = "application/json"
            ngx.say('{"zip_url": "' .. zipUrl .. '"}')
        }
    }

