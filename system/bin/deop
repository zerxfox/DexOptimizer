#!/system/bin/sh

LANG=$(settings get system system_locales)
SDK_VERSION=$(getprop ro.build.version.sdk)
start_time=$(date +%s)
DIRMOD="/storage/emulated/0/DexOptimizer"
LOG_FILE="${DIRMOD}/script_log.txt"

is_russian() {
  [[ "$LANG" == *"en-RU"* ]] || [[ "$LANG" == *"ru-"* ]]
}

log_msg() {
  echo "$1" | tee -a "$LOG_FILE"
}

msg_select() {
  if is_russian; then
    echo "1: everything-profile: выявляет узкие места в коде, улучшает производительность."
    echo "2: speed-profile: оптимизирует скорость выполнения, улучшает отклик интерфейса."
  else
    echo "1: everything-profile: identifies bottlenecks in the code to improve performance."
    echo "2: speed-profile: optimizes execution speed, enhances interface responsiveness."
  fi
}

notify_completion() {
  execution_time=$(( $(date +%s) - start_time ))
  minutes=$((execution_time / 60))
  seconds=$((execution_time % 60))

  if is_russian; then
    total_time="Время работы: ${minutes} минут и ${seconds} секунд"
    su -lp 2000 -c "cmd notification post -S bigtext -t 'DexOptimizer' 'Tag' 'Скрипт выполнился за ${minutes} минут и ${seconds} секунд!'"
  else
    total_time="Working time: ${minutes} minutes and ${seconds} seconds"
    su -lp 2000 -c "cmd notification post -S bigtext -t 'DexOptimizer' 'Tag' 'The script ran successfully in ${minutes} minutes and ${seconds} seconds!'"
  fi
  log_msg "$total_time"
}

choose_profile() {
  package=$1

  usage_output=$(dumpsys usagestats | grep "package=$package")

  if [ -z "$usage_output" ]; then
    echo "everything-profile"
    return
  fi

  bucket_value=$(echo "$usage_output" | grep -o 'bucket=[0-9]*' | head -n 1 | cut -d '=' -f 2)

  if [ "$bucket_value" -gt 10 ]; then
    echo "speed-profile"
  else
    echo "everything-profile"
  fi
}

compile_profile() {
  count="$1"
  part="$2"
  profile_name="$3" 
  
  output=$(case "$SDK_VERSION" in
    [2][3-9]|3[0-3]) cmd package compile -m "$profile_name" -f "$part" 2>&1 ;;
    [3][4-5]) cmd package compile -m "$profile_name" -p PRIORITY_INTERACTIVE_FAST -f --full "$part" 2>&1 ;;
  esac)

  if echo "$output" | grep -q "Success"; then
    status=$(is_russian && echo "Успех" || echo "Success")
  else
    status=$(is_russian && echo "Ошибка" || echo "Failed")
  fi

  log_msg "[$((count + 1))] App: $part ($profile_name) - $status"
}

process_part() {
  count="$1"
  part="$2"
  profile_process="$3"
  
  for pack in $part; do
    if [ "$profile_process" = "auto" ]; then
      selected_profile=$(choose_profile "$pack")
    else
      selected_profile="$profile_process"
    fi
    compile_profile "$count" "$pack" "$selected_profile"
  done
}

su -c mkdir -p "$DIRMOD"
: > "$LOG_FILE"
log_msg "$(is_russian && echo "Имя устройства: $(getprop ro.product.name) | Модель системы: $(getprop ro.product.system.model)" || echo "Device Name: $(getprop ro.product.name) | System Model: $(getprop ro.product.system.model)")"
log_msg "$(is_russian && echo ">>> Скрипт запущен..." || echo ">>> The script is running...")"

is_russian && echo "Выбери режим скрипта (1: Автоматический, 2: Ручной): " || echo "Select the script mode (1: Automatic, 2: Manual): "
read -r WORK

if [[ "$WORK" -ne 1 && "$WORK" -ne 2 ]]; then
    is_russian && echo "Ошибка: Недопустимое значение режима скрипта" || echo "Error: Invalid script mode value"
    exit 1
fi

if [ "$WORK" -eq 2 ]; then
  is_russian && echo "Выбери приложения (1: Пользовательские, 2: Системные, 3: Все): " || echo "Select apps (1: User, 2: System, 3: All): "
  read -r PACKAGES
  
  msg_select
  is_russian && echo "Выбери профиль (1: everything, 2: speed-profile): " || echo "Select profile (1: everything, 2: speed-profile): "
  read -r SETTINGS

  case "$SETTINGS" in
    1) profile="everything-profile" ;;
    2) profile="speed-profile" ;;
    *) log_msg "$(is_russian && echo "Ошибка: Неверный выбор профиля" || echo "Error: Invalid profile selection")"; exit 1 ;;
  esac
else
  PACKAGES=3
  profile="auto"
fi

is_russian && echo "Выбери максимальное число процессов (10 - максимум): " || echo "Select the maximum count of PROCESSES (10 - max): "
read -r PARTS

if [ "$PARTS" -lt 1 ] || [ "$PARTS" -gt 10 ]; then
  log_msg "$(is_russian && echo "Ошибка: ПРОЦЕССЫ должны быть от 1 до 10" || echo "Error: PROCESSES must be between 1 and 10")" >&2
  exit 1
fi

case "$PACKAGES" in
  1) packages_file=$(pm list packages -3 | awk '{sub("^package:", ""); print}') ;;  # user
  2) packages_file=$(pm list packages -s | awk '{sub("^package:", ""); print}') ;;  # system
  3) packages_file=$(pm list packages | awk '{sub("^package:", ""); print}') ;;     # all
  *) log_msg "$(is_russian && echo "Ошибка: Недопустимое значение для приложений" || echo "Error: Invalid value to apps")"; exit 1 ;;
esac

total_count=$(echo "$packages_file" | wc -l)
part_size=$(( (total_count + PARTS - 1) / PARTS ))

if [ "$WORK" -eq 1 ]; then
    log_msg "$(is_russian && echo "Выбран режим работы скрипта: Автоматический" || echo "Selected the script operation: Automatic")"
else
    log_msg "$(is_russian && echo "Выбранные пакеты: $PACKAGES" || echo "Selected packages: $PACKAGES")"
    log_msg "$(is_russian && echo "Выбранный профиль: $SETTINGS" || echo "Selected profile: $SETTINGS")"
fi
log_msg "$(is_russian && echo "Выбранные процессы: $PARTS" || echo "Selected processes: $PARTS")"
log_msg "$(is_russian && echo "Количество приложений: $total_count" || echo "Count of apps: $total_count")"

parts=()
i=0
while [ $i -lt $PARTS ]; do
  parts[$i]=""
  i=$((i + 1))
done

i=0
while [ $i -lt $total_count ]; do
  part_index=$((i / part_size))
  if [ $part_index -ge $PARTS ]; then
    part_index=$((PARTS - 1))
  fi
  parts[$part_index]="${parts[$part_index]} $(echo "$packages_file" | sed -n "$((i + 1))p")"
  i=$((i + 1))
done

log_msg "$(is_russian && echo ">>> Компиляция пакетов" || echo ">>> Compiling packages")"
i=0
while [ $i -lt $PARTS ]; do
  if [ "$WORK" -eq 1 ]; then
    process_part "$i" "${parts[$i]}" "auto" &
  else
    process_part "$i" "${parts[$i]}" "$profile" &
  fi
  i=$((i + 1))
done
wait

cmd package bg-dexopt-job | tee -a "$LOG_FILE"
notify_completion
